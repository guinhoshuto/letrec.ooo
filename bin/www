#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('letrec.ooo:server');
const http = require('http');
const fs = require('fs');
const { Client, Intents } = require('discord.js');
require('dotenv').config();

const splitLines = (s) => s.split(/\r?\n/)
const wordDB = fs.readFileSync('palavras', 'utf8', (err, data) => {
  if (err) {
    console.error(err)
    return
  }
})
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const wordlist = splitLines(wordDB)
let randomIndex = Math.floor(Math.random()*wordlist.length)
let secret = wordlist[randomIndex]
console.log(secret)

const client = new Client({
  intents: [
    Intents.FLAGS.GUILDS,
    Intents.FLAGS.GUILD_MESSAGES
  ]
})

function removeVariacoesDeLetras(word){
  let letras = [...word]
  for (let w = 0; w < letras.length; w++ ){
      if(['Ã©', 'Ãª'].indexOf(letras[w]) >= 0) letras[w] = "e"
      if(['Ãº', 'Ã¹'].indexOf(letras[w]) >= 0) letras[w] = "u"
      if(['Ã­', 'Ã®'].indexOf(letras[w]) >= 0) letras[w] = "i"
      if(['Ã³', 'Ã´', 'Ãµ'].indexOf(letras[w]) >= 0) letras[w] = "o"
      if(['Ã¡', 'Ã ', 'Ã£', 'Ã¢'].indexOf(letras[w]) >= 0) letras[w] = "a"
      if(letras[w] === 'Ã§') letras[w] = "c"
  }
  console.log(letras)
  const wordFormatada = letras.join('')
  return wordFormatada
}

function newGame(){
  let randomIndex = Math.floor(Math.random()*wordlist.length)
  let secret = wordlist[randomIndex]
  console.log(secret)
  return secret
}

function charCheck(word, i){
  let word_ = removeVariacoesDeLetras(word)
  let secret_ = removeVariacoesDeLetras(secret)
  console.log(secret_)
  const attempt = word[i]
  if (secret_[i] === attempt)
      return "ðŸŸ©"
  if (secret_.includes(attempt))
      return "ðŸŸ¨"
  return "â¬›"
}

client.on('ready', ()=> {
  // console.log(secret)
  console.log(typeof(secret))
})

client.on('interactionCreate', async interaction => {
  if(!interaction.isCommand()) return;
  if(interaction.commandName === 'cu'){
    await interaction.reply('coloque o cu no meu peito')
  }
})

client.on('messageCreate', (message) => {
  if (message.author.bot) return;
  let result = []
  if(message.content.length === 5){
      let msgChars = [...message.content]
      for(let i = 0; i < msgChars.length; i++){
          console.log('aqui')
          result.push(charCheck(msgChars, i))
      }
  } else {
      message.reply({
          content: 'A palavra nÃ£o tem 5 caracteres'
      })
  }

  let x = result.join(' ')
  message.reply({
      content: String(x + ' ')
  })
})

client.login(process.env.TOKEN)